From 378f1dc2732ecacfe0eda7dbef086b077b10617e Mon Sep 17 00:00:00 2001
From: Roman Stratiienko <r.stratiienko@gmail.com>
Date: Mon, 7 Aug 2023 23:07:16 +0300
Subject: [PATCH 4/6] Fix images generation for broadcom after switching to new
 parted.py

Fixes: e88d29d667df ("platform: tools: Use custom parted.py instead of system sgdisk")
Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
---
 platform/tools/gensdimg.sh |  9 +++++++--
 platform/tools/parted.py   | 12 +++++++++---
 2 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/platform/tools/gensdimg.sh b/platform/tools/gensdimg.sh
index 8e32f7f..daebf7c 100755
--- a/platform/tools/gensdimg.sh
+++ b/platform/tools/gensdimg.sh
@@ -42,6 +42,11 @@ gen_image() {
         BL_SIZE=$(( 1024 * 1024 * 2 - 128 * 1024 ))
     fi
 
+    if [ "$PLATFORM" = "broadcom" ]; then
+        BL_START=128K
+        BL_SIZE=$(( 1024 * 1024 * 128 - 128 * 1024 ))
+    fi
+
     if [ "$TYPE" != "SD" ]; then
         ${PARTED_TOOL} create_empty  ${BASE_ARGS} --size=256M
     else
@@ -49,11 +54,11 @@ gen_image() {
     fi
 
     ${PARTED_TOOL} add_image     ${BASE_ARGS} --partition-name=bootloader --start=${BL_START} --size=${BL_SIZE} --img-file=bootloader-$SUFFIX.img
-    ${PARTED_TOOL} add_image     ${BASE_ARGS} --partition-name=uboot-env  --start=3M          --size=512K       --img-file=env.img
+    ${PARTED_TOOL} add_image     ${BASE_ARGS} --partition-name=uboot-env                      --size=512K       --img-file=env.img
 
     if [ "$PLATFORM" = "broadcom" ]; then
         # Broadcom ROM code will look for a FAT16 partition on MBR (It doesn't support GPT). Therefore, create a hybrid MBR.
-        ${PARTED_TOOL} set_as_mbr_partition ${BASE_ARGS} --partition-name=bootloader
+        ${PARTED_TOOL} set_as_mbr_partition ${BASE_ARGS} --partition-name=bootloader --part-type=0x4
     fi
 
     # Skip remaining for deploy images
diff --git a/platform/tools/parted.py b/platform/tools/parted.py
index d8a63fc..a52c599 100755
--- a/platform/tools/parted.py
+++ b/platform/tools/parted.py
@@ -142,6 +142,12 @@ def lba_to_chs(lba, sectors_per_track, heads):
     remainder = lba % sectors_per_cylinder
     head = remainder // sectors_per_track
     sector = (remainder % sectors_per_track) + 1  # Sectors are usually 1-indexed in CHS notation
+    if cylinder > 1023:
+        # We cannot represent more than 1023 cylinders in CHS notation
+        cylinder = 1023
+        head = heads
+        sector = sectors_per_track
+
     return struct.pack("BBB", head, ((cylinder >> 8) << 6) | sector, cylinder & 0xff)
 
 def store_protected_mbr(disk_image, hybrid_part_name, hybrid_part_type):
@@ -218,7 +224,7 @@ def create_empty_gpt_header_and_table(disk_image):
     num_part_entries = 128
     part_entry_size = 128
     part_entry_array_crc32 = 0
-    first_usable_lba = div_round_up(gpt_offset + num_part_entries * part_entry_size, 512)
+    first_usable_lba = div_round_up(gpt_offset + 512 + num_part_entries * part_entry_size, 512)
     last_usable_lba = backup_lba - 33
 
     gpt_header = (signature, revision, header_size, crc32, reserved, current_lba, backup_lba, first_usable_lba, last_usable_lba, disk_guid, part_entry_start_lba, num_part_entries, part_entry_size, part_entry_array_crc32)
@@ -271,11 +277,11 @@ def create_empty_partition(disk_image, partition_name, start, size):
             sys.exit(1)
 
         if start + size > r[0] and start + size <= r[1]:
-            print("FAIL: Partition end overlaps with an existing segment: {r[2]}")
+            print(f"FAIL: Partition end overlaps with an existing segment: {r[2]}")
             sys.exit(1)
 
         if start < r[0] and start + size > r[1]:
-            print("FAIL: Partition overlaps with an existing segment: {r[2]}")
+            print(f"FAIL: Partition overlaps with an existing segment: {r[2]}")
             sys.exit(1)
 
     # Create a new partition entry
-- 
2.39.2

