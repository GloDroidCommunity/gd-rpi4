From a0ae3de35cd8c0d0cca443eeac4cfa13534a821e Mon Sep 17 00:00:00 2001
From: Roman Stratiienko <r.stratiienko@gmail.com>
Date: Thu, 22 Dec 2022 13:31:15 +0200
Subject: [PATCH 07/21] minigbm: Allow using single path for testing and
 allocation

At this moment minigbm require 2 separate logic to be implemented by the
backends:
1. Filling-up supported combination structure (used for testing)
2. Allocation itself.

Dispite that splitting looks reasonable for a first glance, implementing
and supporting 2 logics is not that easy. The combination structure list
with the priority levels makes thinks even more difficult to understand
and work with. Also such an approach doesn't allow filtering-out the
buffers with unsupported dimentions.

Combining these 2 logics into single should drasticly simplify
implementing of new drivers, e.g.:

    int bo_create_v2(..., bool test_only) {
      if (!is_bo_supported(...)) {
        return -INVAL;
      }
      if (test_only)
        return 0

      allocate();
    }

Change-Id: I86e5330759a701e309bf7e57f7b3dfd2ddf3cfa0
Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
---
 cros_gralloc/cros_gralloc_driver.cc | 20 ++++++++++++++++----
 drv.c                               | 27 ++++++++++++++++-----------
 drv.h                               |  4 ++--
 drv_priv.h                          |  2 ++
 gbm.c                               |  7 +++++--
 5 files changed, 41 insertions(+), 19 deletions(-)

diff --git a/cros_gralloc/cros_gralloc_driver.cc b/cros_gralloc/cros_gralloc_driver.cc
index 3c093c7..ba4bfce 100644
--- a/cros_gralloc/cros_gralloc_driver.cc
+++ b/cros_gralloc/cros_gralloc_driver.cc
@@ -189,6 +189,7 @@ bool cros_gralloc_driver::get_resolved_format_and_use_flags(
 	uint32_t resolved_format;
 	uint64_t resolved_use_flags;
 	struct combination *combo;
+	int ret = 0;
 
 	if (mt8183_camera_quirk_ && (descriptor->use_flags & BO_USE_CAMERA_READ) &&
 	    !(descriptor->use_flags & BO_USE_SCANOUT) &&
@@ -201,6 +202,17 @@ bool cros_gralloc_driver::get_resolved_format_and_use_flags(
 	drv_resolve_format_and_use_flags(drv_.get(), descriptor->drm_format, descriptor->use_flags,
 					 &resolved_format, &resolved_use_flags);
 
+	ret = drv_bo_create(drv_.get(), descriptor->width, descriptor->height, resolved_format,
+			    resolved_use_flags, /*test_only =*/true, NULL);
+	if (ret == 0) {
+		*out_format = resolved_format;
+		*out_use_flags = resolved_use_flags;
+		return true;
+	}
+
+	if (ret != -ENOTSUP)
+		return false;
+
 	combo = drv_get_combination(drv_.get(), resolved_format, resolved_use_flags);
 	if (!combo && (descriptor->droid_usage & GRALLOC_USAGE_HW_VIDEO_ENCODER) &&
 	    descriptor->droid_format != HAL_PIXEL_FORMAT_YCbCr_420_888) {
@@ -276,11 +288,11 @@ int32_t cros_gralloc_driver::allocate(const struct cros_gralloc_buffer_descripto
 		return -EINVAL;
 	}
 
-	bo = drv_bo_create(drv_.get(), descriptor->width, descriptor->height, resolved_format,
-			   resolved_use_flags);
-	if (!bo) {
+	ret = drv_bo_create(drv_.get(), descriptor->width, descriptor->height, resolved_format,
+			    resolved_use_flags, /*test_only =*/false, &bo);
+	if (ret) {
 		ALOGE("Failed to create bo.");
-		return -errno;
+		return ret;
 	}
 
 	num_planes = drv_bo_get_num_planes(bo);
diff --git a/drv.c b/drv.c
index 8ac51ff..bd27ac3 100644
--- a/drv.c
+++ b/drv.c
@@ -344,10 +344,10 @@ static bool drv_bo_release(struct bo *bo)
 	return true;
 }
 
-struct bo *drv_bo_create(struct driver *drv, uint32_t width, uint32_t height, uint32_t format,
-			 uint64_t use_flags)
+int drv_bo_create(struct driver *drv, uint32_t width, uint32_t height, uint32_t format,
+		  uint64_t use_flags, bool test_only, struct bo **out_bo)
 {
-	int ret;
+	int ret = -EINVAL;
 	struct bo *bo;
 	bool is_test_alloc;
 
@@ -357,10 +357,15 @@ struct bo *drv_bo_create(struct driver *drv, uint32_t width, uint32_t height, ui
 	bo = drv_bo_new(drv, width, height, format, use_flags, is_test_alloc);
 
 	if (!bo)
-		return NULL;
-
-	ret = -EINVAL;
-	if (drv->backend->bo_compute_metadata) {
+		return -ENOMEM;
+
+	if (drv->backend->bo_create_v2) {
+		if (!is_test_alloc)
+			ret = drv->backend->bo_create_v2(bo, width, height, format, use_flags,
+							 test_only);
+	} else if (test_only) {
+		return -ENOTSUP;
+	} else if (drv->backend->bo_compute_metadata) {
 		ret = drv->backend->bo_compute_metadata(bo, width, height, format, use_flags, NULL,
 							0);
 		if (!is_test_alloc && ret == 0)
@@ -369,15 +374,15 @@ struct bo *drv_bo_create(struct driver *drv, uint32_t width, uint32_t height, ui
 		ret = drv->backend->bo_create(bo, width, height, format, use_flags);
 	}
 
-	if (ret) {
-		errno = -ret;
+	if (ret || test_only) {
 		free(bo);
-		return NULL;
+		return ret;
 	}
 
 	drv_bo_acquire(bo);
 
-	return bo;
+	*out_bo = bo;
+	return 0;
 }
 
 struct bo *drv_bo_create_with_modifiers(struct driver *drv, uint32_t width, uint32_t height,
diff --git a/drv.h b/drv.h
index 9852cf2..af1dc92 100644
--- a/drv.h
+++ b/drv.h
@@ -147,8 +147,8 @@ struct combination *drv_get_combination(struct driver *drv, uint32_t format, uin
 struct bo *drv_bo_new(struct driver *drv, uint32_t width, uint32_t height, uint32_t format,
 		      uint64_t use_flags, bool is_test_buffer);
 
-struct bo *drv_bo_create(struct driver *drv, uint32_t width, uint32_t height, uint32_t format,
-			 uint64_t use_flags);
+int drv_bo_create(struct driver *drv, uint32_t width, uint32_t height, uint32_t format,
+		  uint64_t use_flags, bool test_only, struct bo **out_bo);
 
 struct bo *drv_bo_create_with_modifiers(struct driver *drv, uint32_t width, uint32_t height,
 					uint32_t format, const uint64_t *modifiers, uint32_t count);
diff --git a/drv_priv.h b/drv_priv.h
index db61583..f4d5c02 100644
--- a/drv_priv.h
+++ b/drv_priv.h
@@ -81,6 +81,8 @@ struct backend {
 	void (*close)(struct driver *drv);
 	int (*bo_create)(struct bo *bo, uint32_t width, uint32_t height, uint32_t format,
 			 uint64_t use_flags);
+	int (*bo_create_v2)(struct bo *bo, uint32_t width, uint32_t height, uint32_t format,
+			    uint64_t use_flags, bool test_only);
 	int (*bo_create_with_modifiers)(struct bo *bo, uint32_t width, uint32_t height,
 					uint32_t format, const uint64_t *modifiers, uint32_t count);
 	// Either both or neither _metadata functions must be implemented.
diff --git a/gbm.c b/gbm.c
index 190347e..b14543e 100644
--- a/gbm.c
+++ b/gbm.c
@@ -130,6 +130,7 @@ PUBLIC struct gbm_bo *gbm_bo_create(struct gbm_device *gbm, uint32_t width, uint
 				    uint32_t format, uint32_t usage)
 {
 	struct gbm_bo *bo;
+	int ret = 0;
 
 	if (!gbm_device_is_format_supported(gbm, format, usage))
 		return NULL;
@@ -147,10 +148,12 @@ PUBLIC struct gbm_bo *gbm_bo_create(struct gbm_device *gbm, uint32_t width, uint
 	if (format == GBM_FORMAT_YVU420 && (usage & GBM_BO_USE_LINEAR))
 		format = DRM_FORMAT_YVU420_ANDROID;
 
-	bo->bo = drv_bo_create(gbm->drv, width, height, format, gbm_convert_usage(usage));
+	ret = drv_bo_create(gbm->drv, width, height, format, gbm_convert_usage(usage),
+			    /*testonly =*/false, &bo->bo);
 
-	if (!bo->bo) {
+	if (ret) {
 		free(bo);
+		errno = -ret;
 		return NULL;
 	}
 
-- 
2.39.2

