From 868a449d109d9d11da474b6ce1d6f0049d452e8b Mon Sep 17 00:00:00 2001
From: Roman Stratiienko <r.stratiienko@gmail.com>
Date: Sat, 17 Dec 2022 19:44:49 +0200
Subject: [PATCH 11/21] Add meson.build

Change-Id: I5d5cb9948206b15e833ff63a7dccd2b1002c8cf3
Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
---
 cros_gralloc/gralloc0/meson.build        | 10 +++
 cros_gralloc/gralloc4/meson.build        | 38 +++++++++++
 cros_gralloc/meson.build                 | 16 +++++
 dmabuf_driver/dmabuf_external_driver.cpp |  7 +-
 drv.c                                    | 32 ++++++----
 gbm_mesa_driver/gbm_mesa_driver.cpp      |  7 +-
 gbm_mesa_driver/gbm_mesa_internals.cpp   | 10 ++-
 gbm_mesa_driver/meson.build              | 11 ++++
 meson.build                              | 81 ++++++++++++++++++++++++
 9 files changed, 187 insertions(+), 25 deletions(-)
 create mode 100644 cros_gralloc/gralloc0/meson.build
 create mode 100644 cros_gralloc/gralloc4/meson.build
 create mode 100644 cros_gralloc/meson.build
 create mode 100644 gbm_mesa_driver/meson.build
 create mode 100644 meson.build

diff --git a/cros_gralloc/gralloc0/meson.build b/cros_gralloc/gralloc0/meson.build
new file mode 100644
index 0000000..6c45399
--- /dev/null
+++ b/cros_gralloc/gralloc0/meson.build
@@ -0,0 +1,10 @@
+# gralloc0
+shared_library(
+    'gralloc.minigbm_gd',
+    files('gralloc0.cc'),
+    link_with : libminigbm_gralloc,
+    name_prefix : '',
+    dependencies : deps,
+    install : true,
+    install_dir : get_option('libdir') / 'hw',
+)
diff --git a/cros_gralloc/gralloc4/meson.build b/cros_gralloc/gralloc4/meson.build
new file mode 100644
index 0000000..925ec05
--- /dev/null
+++ b/cros_gralloc/gralloc4/meson.build
@@ -0,0 +1,38 @@
+src_allocator4 = files(
+    'CrosGralloc4Allocator.cc',
+    'CrosGralloc4AllocatorService.cc',
+    'CrosGralloc4Utils.cc',
+)
+
+src_mapper4 = files(
+    'CrosGralloc4Mapper.cc',
+    'CrosGralloc4Utils.cc',
+)
+
+shared_library(
+    'android.hardware.graphics.mapper@4.0-impl.minigbm_gd',
+    src_mapper4,
+    link_with : libminigbm_gralloc,
+    name_prefix : '',
+    dependencies : deps,
+    include_directories: inc_include,
+    install : true,
+    install_dir : get_option('libdir') / 'hw',
+)
+
+executable(
+    'android.hardware.graphics.allocator@4.0-service.minigbm_gd',
+    src_allocator4,
+    link_with : libminigbm_gralloc,
+    dependencies : deps,
+    include_directories: inc_include,
+    install : true,
+    install_dir : get_option('bindir') / 'hw',
+)
+
+configure_file(
+    input: 'android.hardware.graphics.allocator@4.0-service.minigbm.rc',
+    output: '@PLAINNAME@',
+    copy: true,
+    install_dir: get_option('sysconfdir') / 'init',
+)
diff --git a/cros_gralloc/meson.build b/cros_gralloc/meson.build
new file mode 100644
index 0000000..ffd2d4c
--- /dev/null
+++ b/cros_gralloc/meson.build
@@ -0,0 +1,16 @@
+src_minigbm_gralloc = files(
+    'cros_gralloc_buffer.cc',
+    'cros_gralloc_driver.cc',
+    'cros_gralloc_helpers.cc',
+)
+
+libminigbm_gralloc = shared_library(
+    'minigbm_gralloc_gd',
+    src_minigbm_gralloc,
+    link_whole: libminigbm,
+    cpp_args: '-DHAS_DMABUF_SYSTEM_HEAP',
+    install : true,
+)
+
+subdir('gralloc0')
+subdir('gralloc4')
diff --git a/dmabuf_driver/dmabuf_external_driver.cpp b/dmabuf_driver/dmabuf_external_driver.cpp
index a50e2d3..94b9e4b 100644
--- a/dmabuf_driver/dmabuf_external_driver.cpp
+++ b/dmabuf_driver/dmabuf_external_driver.cpp
@@ -7,7 +7,7 @@
 extern "C" {
 #endif
 
-struct backend dmabuf_backend = {
+struct backend backend_dmabuf_heap = {
 	.name = "dmabuf",
 	.init = dmabuf_driver_init,
 	.close = dmabuf_driver_close,
@@ -21,11 +21,6 @@ struct backend dmabuf_backend = {
 	.resolve_format_and_use_flags = dmabuf_resolve_format_and_use_flags,
 };
 
-struct backend *init_external_backend(int *fd)
-{
-	return &dmabuf_backend;
-}
-
 #ifdef __cplusplus
 }
 #endif
diff --git a/drv.c b/drv.c
index bd27ac3..d2682a6 100644
--- a/drv.c
+++ b/drv.c
@@ -24,15 +24,12 @@
 #include "drv_priv.h"
 #include "util.h"
 
-#ifdef DRV_EXTERNAL
-extern struct backend *init_external_backend();
-
-static const struct backend *drv_get_backend(int fd)
-{
-	return init_external_backend();
-}
-#else
-
+#ifdef DRV_DMABUF_HEAP
+extern const struct backend backend_dmabuf_heap;
+#endif
+#ifdef DRV_GBM_MESA
+extern const struct backend backend_gbm_mesa;
+#endif
 #ifdef DRV_AMDGPU
 extern const struct backend backend_amdgpu;
 #endif
@@ -111,7 +108,6 @@ static const struct backend *drv_get_backend(int fd)
 	drmFreeVersion(drm_version);
 	return NULL;
 }
-#endif
 
 struct driver *drv_create(int fd)
 {
@@ -127,8 +123,20 @@ struct driver *drv_create(int fd)
 	minigbm_debug = getenv("MINIGBM_DEBUG");
 	drv->compression = (minigbm_debug == NULL) || (strcmp(minigbm_debug, "nocompression") != 0);
 
-	drv->fd = fd;
-	drv->backend = drv_get_backend(fd);
+#ifdef DRV_GBM_MESA
+	if (fd == -2) {
+		drv->backend = &backend_gbm_mesa;
+	} else
+#endif
+#ifdef DRV_DMABUF_HEAP
+	    if (fd == -3) {
+		drv->backend = &backend_dmabuf_heap;
+	} else
+#endif
+	{
+		drv->fd = fd;
+		drv->backend = drv_get_backend(fd);
+	}
 
 	if (!drv->backend)
 		goto free_driver;
diff --git a/gbm_mesa_driver/gbm_mesa_driver.cpp b/gbm_mesa_driver/gbm_mesa_driver.cpp
index d2c6c7d..0890fea 100644
--- a/gbm_mesa_driver/gbm_mesa_driver.cpp
+++ b/gbm_mesa_driver/gbm_mesa_driver.cpp
@@ -23,7 +23,7 @@
 extern "C" {
 #endif
 
-struct backend gbm_mesa_backend = {
+struct backend backend_gbm_mesa = {
 	.name = "gbm_mesa",
 	.init = gbm_mesa_driver_init,
 	.close = gbm_mesa_driver_close,
@@ -37,11 +37,6 @@ struct backend gbm_mesa_backend = {
 	.resolve_format_and_use_flags = gbm_mesa_resolve_format_and_use_flags,
 };
 
-struct backend *init_external_backend()
-{
-	return &gbm_mesa_backend;
-}
-
 #ifdef __cplusplus
 }
 #endif
diff --git a/gbm_mesa_driver/gbm_mesa_internals.cpp b/gbm_mesa_driver/gbm_mesa_internals.cpp
index 97d5257..548d31c 100644
--- a/gbm_mesa_driver/gbm_mesa_internals.cpp
+++ b/gbm_mesa_driver/gbm_mesa_internals.cpp
@@ -48,8 +48,14 @@ extern "C" {
 #include <xf86drm.h>
 #include <xf86drmMode.h>
 
+#ifndef EMBEDDED_GBM_WRAPPER
 #define GBM_WRAPPER_NAME "libgbm_mesa_wrapper.so"
 #define GBM_GET_OPS_SYMBOL "get_gbm_ops"
+#else
+extern "C" {
+struct gbm_ops *get_gbm_ops();
+}
+#endif
 
 void gbm_mesa_resolve_format_and_use_flags(struct driver *drv, uint32_t format, uint64_t use_flags,
 					   uint32_t *out_format, uint64_t *out_use_flags)
@@ -271,6 +277,7 @@ static std::shared_ptr<GbmMesaDriver> gbm_mesa_get_or_init_driver(struct driver
 			return nullptr;
 		}
 
+#ifndef EMBEDDED_GBM_WRAPPER
 		gbm_mesa_drv->dl_handle = dlopen(GBM_WRAPPER_NAME, RTLD_NOW);
 		if (gbm_mesa_drv->dl_handle == nullptr) {
 			drv_loge("%s", dlerror());
@@ -284,6 +291,7 @@ static std::shared_ptr<GbmMesaDriver> gbm_mesa_get_or_init_driver(struct driver
 			drv_loge("Unable to find '%s' symbol", GBM_GET_OPS_SYMBOL);
 			return nullptr;
 		}
+#endif
 
 		gbm_mesa_drv->wrapper = get_gbm_ops();
 		if (gbm_mesa_drv->wrapper == nullptr) {
@@ -354,9 +362,9 @@ int gbm_mesa_bo_create(struct bo *bo, uint32_t width, uint32_t height, uint32_t
 		.width = width,
 		.height = height,
 		.drm_format = wr->get_gbm_format(format) ? format : 0,
+		.use_scanout = (use_flags & BO_USE_SCANOUT) != 0,
 		.force_linear = (use_flags & BO_USE_SW_MASK) != 0,
 		.needs_map_stride = (use_flags & BO_USE_SW_MASK) != 0,
-		.use_scanout = (use_flags & BO_USE_SCANOUT) != 0,
 	};
 
 	/* Alignment for RPI4 CSI camera. Since we do not care about other cameras, keep this
diff --git a/gbm_mesa_driver/meson.build b/gbm_mesa_driver/meson.build
new file mode 100644
index 0000000..eb90841
--- /dev/null
+++ b/gbm_mesa_driver/meson.build
@@ -0,0 +1,11 @@
+
+src_gbm_mesa_driver = files(
+    'gbm_mesa_driver.cpp',
+    'gbm_mesa_internals.cpp',
+)
+
+shared_library(
+    'gbm_mesa_wrapper',
+    files('gbm_mesa_wrapper.c'),
+    install : true,
+)
diff --git a/meson.build b/meson.build
new file mode 100644
index 0000000..351c71a
--- /dev/null
+++ b/meson.build
@@ -0,0 +1,81 @@
+project(
+    'minigbm',
+    ['c', 'cpp'],
+    license : 'BSD?',
+    meson_version : '>= 0.56',
+    default_options : ['buildtype=debugoptimized', 'b_ndebug=if-release', 'c_std=c11', 'cpp_std=c++17', 'cpp_rtti=false']
+)
+
+inc_include = [include_directories('.')]
+
+cpu_family = host_machine.cpu_family()
+
+deps = [
+    dependency('cutils'),
+    dependency('drm'),
+    dependency('hardware'),
+    dependency('hidlbase'),
+    dependency('log'),
+]
+
+src_x86 = files(
+    'amdgpu.c',
+    'i915.c',
+)
+
+src_arm = files(
+    'rockchip.c',
+    'msm.c',
+    'vc4.c',
+    'mediatek.c',
+)
+
+src_minigbm = files(
+    'drv_array_helpers.c',
+    'drv_helpers.c',
+    'minigbm_helpers.c',
+    'virtgpu.c',
+    'virtgpu_virgl.c',
+    'dri.c',
+    'drv.c',
+    'virtgpu_cross_domain.c',
+    'dmabuf_driver/dmabuf_external_driver.cpp',
+    'dmabuf_driver/dmabuf_internals.cpp',
+)
+
+c_flags = [
+    '-DDRV_DMABUF_HEAP',
+    '-DDRV_GBM_MESA',
+]
+
+if cpu_family == 'x86' or cpu_family == 'x86_64'
+    src_minigbm += src_x86
+    c_flags += [
+        '-DDRV_AMDGPU',
+        '-DDRV_I915',
+        '-DDRV_RADEON',
+    ]
+elif cpu_family == 'arm' or cpu_family == 'aarch64'
+    src_minigbm += src_arm
+    c_flags += [
+#        '-DDRV_MEDIATEK', # require custom libdrm
+        '-DDRV_MESON',
+        '-DDRV_MSM',
+#        '-DDRV_ROCKCHIP', # require custom libdrm
+#        '-DDRV_VC4', # vc4 looks verey dumb, gbm_mesa should work better
+    ]
+elif
+    error('CPU family not supported')
+endif
+
+subdir('gbm_mesa_driver')
+
+libminigbm = static_library(
+    'minigbm',
+    src_minigbm + src_gbm_mesa_driver,
+    c_args : c_flags,
+    cpp_args : c_flags,
+    dependencies : deps,
+)
+
+subdir('cros_gralloc')
-- 
2.39.2

