From da7dd51d90b6a93a7bf9e68329b6080d77fea407 Mon Sep 17 00:00:00 2001
From: Roman Stratiienko <r.stratiienko@gmail.com>
Date: Fri, 23 Sep 2022 19:14:49 +0300
Subject: [PATCH 1/3] Revert "libcamera: pipeline: raspberrypi: Support color
 spaces"

This reverts commit 13fdf9d0dcd371e8b348e234847b133494be615d.
---
 .../pipeline/raspberrypi/raspberrypi.cpp      | 40 -------------------
 1 file changed, 40 deletions(-)

diff --git a/src/libcamera/pipeline/raspberrypi/raspberrypi.cpp b/src/libcamera/pipeline/raspberrypi/raspberrypi.cpp
index 087c71b65700c6..c9514a5f084d72 100644
--- a/src/libcamera/pipeline/raspberrypi/raspberrypi.cpp
+++ b/src/libcamera/pipeline/raspberrypi/raspberrypi.cpp
@@ -107,7 +107,6 @@ V4L2DeviceFormat toV4L2DeviceFormat(const V4L2VideoDevice *dev,
 
 	deviceFormat.fourcc = dev->toV4L2PixelFormat(pix);
 	deviceFormat.size = format.size;
-	deviceFormat.colorSpace = format.colorSpace;
 	return deviceFormat;
 }
 
@@ -134,7 +133,6 @@ V4L2SubdeviceFormat findBestFormat(const SensorFormats &formatsMap, const Size &
 {
 	double bestScore = std::numeric_limits<double>::max(), score;
 	V4L2SubdeviceFormat bestFormat;
-	bestFormat.colorSpace = ColorSpace::Raw;
 
 	constexpr float penaltyAr = 1500.0;
 	constexpr float penaltyBitDepth = 500.0;
@@ -363,8 +361,6 @@ CameraConfiguration::Status RPiCameraConfiguration::validate()
 	if (config_.empty())
 		return Invalid;
 
-	status = validateColorSpaces(ColorSpaceFlag::StreamsShareColorSpace);
-
 	/*
 	 * What if the platform has a non-90 degree rotation? We can't even
 	 * "adjust" the configuration and carry on. Alternatively, raising an
@@ -532,25 +528,11 @@ CameraConfiguration::Status RPiCameraConfiguration::validate()
 		V4L2DeviceFormat format;
 		format.fourcc = dev->toV4L2PixelFormat(cfg.pixelFormat);
 		format.size = cfg.size;
-		format.colorSpace = cfg.colorSpace;
-
-		LOG(RPI, Debug)
-			<< "Try color space " << ColorSpace::toString(cfg.colorSpace);
 
 		int ret = dev->tryFormat(&format);
 		if (ret)
 			return Invalid;
 
-		if (cfg.colorSpace != format.colorSpace) {
-			status = Adjusted;
-			LOG(RPI, Debug)
-				<< "Color space changed from "
-				<< ColorSpace::toString(cfg.colorSpace) << " to "
-				<< ColorSpace::toString(format.colorSpace);
-		}
-
-		cfg.colorSpace = format.colorSpace;
-
 		cfg.stride = format.planes[0].bpl;
 		cfg.frameSize = format.planes[0].size;
 
@@ -575,7 +557,6 @@ PipelineHandlerRPi::generateConfiguration(Camera *camera, const StreamRoles &rol
 	PixelFormat pixelFormat;
 	V4L2VideoDevice::Formats fmts;
 	Size size;
-	std::optional<ColorSpace> colorSpace;
 
 	if (roles.empty())
 		return config;
@@ -591,7 +572,6 @@ PipelineHandlerRPi::generateConfiguration(Camera *camera, const StreamRoles &rol
 			pixelFormat = mbusCodeToPixelFormat(sensorFormat.mbus_code,
 							    BayerFormat::Packing::CSI2);
 			ASSERT(pixelFormat.isValid());
-			colorSpace = ColorSpace::Raw;
 			bufferCount = 2;
 			rawCount++;
 			break;
@@ -599,12 +579,6 @@ PipelineHandlerRPi::generateConfiguration(Camera *camera, const StreamRoles &rol
 		case StreamRole::StillCapture:
 			fmts = data->isp_[Isp::Output0].dev()->formats();
 			pixelFormat = formats::NV12;
-			/*
-			 * Still image codecs usually expect the sYCC color space.
-			 * Even RGB codecs will be fine as the RGB we get with the
-			 * sYCC color space is the same as sRGB.
-			 */
-			colorSpace = ColorSpace::Sycc;
 			/* Return the largest sensor resolution. */
 			size = sensorSize;
 			bufferCount = 1;
@@ -622,11 +596,6 @@ PipelineHandlerRPi::generateConfiguration(Camera *camera, const StreamRoles &rol
 			 */
 			fmts = data->isp_[Isp::Output0].dev()->formats();
 			pixelFormat = formats::YUV420;
-			/*
-			 * Choose a color space appropriate for video recording.
-			 * Rec.709 will be a good default for HD resolutions.
-			 */
-			colorSpace = ColorSpace::Rec709;
 			size = { 1920, 1080 };
 			bufferCount = 4;
 			outCount++;
@@ -635,7 +604,6 @@ PipelineHandlerRPi::generateConfiguration(Camera *camera, const StreamRoles &rol
 		case StreamRole::Viewfinder:
 			fmts = data->isp_[Isp::Output0].dev()->formats();
 			pixelFormat = formats::ARGB8888;
-			colorSpace = ColorSpace::Sycc;
 			size = { 800, 600 };
 			bufferCount = 4;
 			outCount++;
@@ -683,7 +651,6 @@ PipelineHandlerRPi::generateConfiguration(Camera *camera, const StreamRoles &rol
 		StreamConfiguration cfg(formats);
 		cfg.size = size;
 		cfg.pixelFormat = pixelFormat;
-		cfg.colorSpace = colorSpace;
 		cfg.bufferCount = bufferCount;
 		config->addConfiguration(cfg);
 	}
@@ -793,7 +760,6 @@ int PipelineHandlerRPi::configure(Camera *camera, CameraConfiguration *config)
 		V4L2PixelFormat fourcc = stream->dev()->toV4L2PixelFormat(cfg.pixelFormat);
 		format.size = cfg.size;
 		format.fourcc = fourcc;
-		format.colorSpace = cfg.colorSpace;
 
 		LOG(RPI, Debug) << "Setting " << stream->name() << " to "
 				<< format;
@@ -809,10 +775,6 @@ int PipelineHandlerRPi::configure(Camera *camera, CameraConfiguration *config)
 			return -EINVAL;
 		}
 
-		LOG(RPI, Debug)
-			<< "Stream " << stream->name() << " has color space "
-			<< ColorSpace::toString(cfg.colorSpace);
-
 		cfg.setStream(stream);
 		stream->setExternal(true);
 
@@ -839,8 +801,6 @@ int PipelineHandlerRPi::configure(Camera *camera, CameraConfiguration *config)
 		format = {};
 		format.size = maxSize;
 		format.fourcc = dev->toV4L2PixelFormat(formats::YUV420);
-		/* No one asked for output, so the color space doesn't matter. */
-		format.colorSpace = ColorSpace::Sycc;
 		ret = dev->setFormat(&format);
 		if (ret) {
 			LOG(RPI, Error)
-- 
2.37.2

